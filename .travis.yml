language: cpp
#env:
#  global:
#    - secure: ""
branches:
    only:
        - /^v\d+\..+$/
        - master
        - ci
        - travis
        - hunter
        - coverity
        - /^release.*$/
matrix:
    include:
        #- os: linux
        - OS_TYPE=centos OS_VERSION=7
          #dist: trusty
          #dist: precise
          dist: el/7
          #dist: centos/7
          sudo: required
          env:
              - CUDA=ON
              - CUDA_VERSION=8
cache:
    directories:
        - $HOME/.local
before_install:
  - |
    if [ "$TRAVIS_OS_NAME" = linux ]; then
      echo "Checking format of sourcecode..."
      find . -type f \( -name '*.cpp' -o -name '*.h' -o -name '*.cu' -o -name '*.cuh' \) -print0 | xargs -r0 clang-format -i
      # git diff --color # --exit-code
    fi
  - |
    if [ "$TRAVIS_OS_NAME" = linux ]; then
      sudo yum update -y 
      sudo yum install -y epel-release
      sudo yum install -y kernel-devel-$(uname -r) kernel-headers-$(uname -r)
      sudo yum install -y make
      sudo yum groupinstall -y "Development Tools"
      sudo yum install -y git wget bzip2 vim ntp nodejs cmake libstdc++ ncurses-libs gcc gcc-c++ kernel-devel
      sudo yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel
      sudo yum install -y libstdc++-static glibc-static
      
      # update git to version 2
      yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-1.noarch.rpm
      # rpm --import http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco
      yum install -y git
      yum update git
      
      sudo yum install -y yum-utils
      sudo yum install -y centos-release-scl scl-utils
      sudo yum-config-manager --enable rhel-server-rhscl-7-rpms
      sudo yum install -y devtoolset-7
      sudo yum install -y devtoolset-7-toolchain
      scl enable devtoolset-7 bash


      yum install subscription-manager -y

      #sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
      #sudo apt-get -q update
      #if [ "$CUDA_VERSION" = "8" ]; then
        #sudo apt-get -qy install g++-5
        #export CC=gcc-5
        #export CXX=g++-5
      #else
        #sudo apt-get -qy install g++-6
        #export CC=gcc-6
        #export CXX=g++-6
      #fi
      sh scripts/install_cmake.sh
      export PATH=$HOME/.local/bin:$PATH
      #. scripts/install-cuda-ubuntu1604.sh $CUDA_VERSION
      . scripts/install_cuda_centos7.sh $CUDA_VERSION
      
      
      git clone https://github.com/pyenv/pyenv.git ~/.pyenv
      export PYENV_ROOT="$HOME/.pyenv" 
      export PATH="$PYENV_ROOT/bin:$PATH" 
      #eval "$(pyenv init -)"
      if command -v pyenv 1>/dev/null 2>&1; then
        eval "$(pyenv init -)"
      fi
      pyenv install 3.6.6
      pyenv global 3.6.6
      
      pip install --user requests gitpython
    elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
      curl -L https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda_9.1.128_mac -o $HOME/cuda_9.1.128_mac.dmg
      hdiutil mount $HOME/cuda_9.1.128_mac.dmg
      sleep 5
      ls -ltr /Volumes/CUDAMacOSXInstaller/CUDAMacOSXInstaller.app/Contents/MacOS
      sudo /Volumes/CUDAMacOSXInstaller/CUDAMacOSXInstaller.app/Contents/MacOS/CUDAMacOSXInstaller --accept-eula --no-window; export BREW_STATUS=$?
      echo "Brew status $BREW_STATUS"
      if [ $BREW_STATUS -ne 0 ]; then
        echo "Brew Failed"
        exit $BREW_STATUS
      fi
      HOMEBREW_NO_AUTO_UPDATE=1 brew install -q python3
      pip3 install -q requests gitpython
    fi
script: |
    # git clone  https://github.com/q623928815/ethminer.git
    # cd ethminer
    # git submodule update --init --recursive
    cmake -DHUNTER_JOBS_NUMBER=4 -DETHASHCUDA=$CUDA -DETHASHCL=ON -DAPICORE=ON -H. -Bbuild
    cmake --build build --target package -- -j4
    build/ethminer/ethminer --help-ext con
    if [ "$TRAVIS_OS_NAME" = linux ]; then ldd -v build/ethminer/ethminer; fi
    if [ "$TRAVIS_OS_NAME" = osx ]; then otool -L build/ethminer/ethminer; fi
    . build/ethminer/buildinfo.sh
    mkdir package
    mv build/ethminer.tar.gz package/$PROJECT_NAME-$PROJECT_VERSION-cuda-$CUDA_VERSION-$SYSTEM_NAME-$SYSTEM_PROCESSOR.tar.gz


deploy:
    #provider: pages
    #github_token: $GITHUB_TOKEN
    #file_glob: true
    #file: package/*
    provider: s3
    access_key_id: $access_key_id
    secret_access_key: $secret_access_key
    bucket: traviscizz
    edge: true
    #skip_cleanup: true
    #keep_history: true
    region: us-east-1
    local_dir: ./package
    on:
      branch: master
      
