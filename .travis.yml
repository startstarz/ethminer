language: cpp
#env:
#  global:
#    - secure: ""
branches:
    only:
        - /^v\d+\..+$/
        - master
        - ci
        - travis
        - hunter
        - coverity
        - /^release.*$/
matrix:
    include:
        - os: linux
          dist: trusty
          sudo: required
          env:
              - CUDA=ON
              - CUDA_VERSION=9
cache:
    directories:
        - $HOME/.local
before_install:
  - |
    if [ "$TRAVIS_OS_NAME" = linux ]; then
      echo "Checking format of sourcecode..."
      find . -type f \( -name '*.cpp' -o -name '*.h' -o -name '*.cu' -o -name '*.cuh' \) -print0 | xargs -r0 clang-format -i
      git diff --color # --exit-code
    fi
  - |
    if [ "$TRAVIS_OS_NAME" = linux ]; then
      sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
      sudo apt-get -q update
      sudo apt-get -qy install g++-6
      scripts/install_cmake.sh
      . scripts/install-cuda-ubuntu1604.sh $CUDA_VERSION
      pyenv global 3.6
      pip install --user requests gitpython
      if [ "$CUDA_VERSION" = "8" ]; then
        sudo apt-get -qy install g++-5
        export CC=gcc-5
        export CXX=g++-5
      else
        export CC=gcc-6
        export CXX=g++-6
      fi
    elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
      curl -L https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda_9.1.128_mac -o $HOME/cuda_9.1.128_mac.dmg
      hdiutil mount $HOME/cuda_9.1.128_mac.dmg
      sleep 5
      ls -ltr /Volumes/CUDAMacOSXInstaller/CUDAMacOSXInstaller.app/Contents/MacOS
      sudo /Volumes/CUDAMacOSXInstaller/CUDAMacOSXInstaller.app/Contents/MacOS/CUDAMacOSXInstaller --accept-eula --no-window; export BREW_STATUS=$?
      echo "Brew status $BREW_STATUS"
      if [ $BREW_STATUS -ne 0 ]; then
        echo "Brew Failed"
        exit $BREW_STATUS
      fi
      HOMEBREW_NO_AUTO_UPDATE=1 brew install -q python3
      pip3 install -q requests gitpython
    fi
script: |
    cmake -DHUNTER_JOBS_NUMBER=4 -DETHASHCUDA=$CUDA -DETHASHCL=ON -DAPICORE=ON -H. -Bbuild
    cmake --build build --target package -- -j4
    build/ethminer/ethminer --help
    if [ "$TRAVIS_OS_NAME" = linux ]; then ldd -v build/ethminer/ethminer; fi
    if [ "$TRAVIS_OS_NAME" = osx ]; then otool -L build/ethminer/ethminer; fi
    . build/ethminer/buildinfo.sh
    mkdir package
    mv build/ethminer.tar.gz package/$PROJECT_NAME-$PROJECT_VERSION-cuda-$CUDA_VERSION-$SYSTEM_NAME-$SYSTEM_PROCESSOR.tar.gz


deploy:
  - provider: releases
    api_key:
      secure: " FDGIWDJX0U+2F+jzvD1usX7SVftmaBQN4/ahvNOc40ps0HwVKC9wVNj77qInioNZfZInxWDDc0BeFDwrYHEriIdkCKVvtgxTyncRqxgujFMaezuoCueFgAnKfC4T5lp+rq3FdIujlqKLNmxcUDgfzDs0aGliz2v51zysX7N3FvaKRM/RXtMMazXZ4XsNKXITq3sz/2AgCCvHx3rW3qvF2CAKUA0nBTVI2Fv+fiCFvl6DWfIgiPOerWPXZH6PZGAn6wZeNSM2PxrCEVkzMnFTF7ODlRFR8/0yCKL5fKb/ZFPVrQQPSQdaBGsFakVDO2cpxvs7p0SNqOdSiJeo0HDssvimnqo1pumk670xOgoMYP7NV7PjXmhYftUl3J8V+EhfKGHBVnld9rh7mjCFfFQPFeU8E5k+kixmfcm03PueQhZVSpc2OhfxnycOQG6Hp/LHFf6iO19cFRcaTBaj/HWZGXC+/PJnXUWHqapOH/DVDosxgZZGbIgdSs1HTUWJpQdU8aQjtVRfvCJa8dxBmgWrWRqqAmYY1NjgfSx8G9VVu1gfTqIDVhfJAdVtJMAzw21ZOL6e5mtV9e3/iD9ln7Nrk9LoEOyp0frlP0vmngnvg3hOx1SJi/T+OhyEFd///PNBgHtMwN0QNNTqfMuODZ6qktMwD8xb9rxUT+12AflZF6k="
    file_glob: true
    file: package/*
    skip_cleanup: true
    on:
      tags: true
